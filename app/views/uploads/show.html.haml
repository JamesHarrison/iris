%h1="Upload Details: #{@upload.filename} - ID ##{@upload.id}"
- if can? :manage, @upload and @upload.state == 'needs_review'
  %div{:class=>'adminbox'}
    %h2 Upload Pending Review
    %p 
      This upload has been flagged for review. Please check the log to see why, and either manually approve or reject it as appropriate.
    %p
      The following log entries are flagged as errors.
    %pre
      - @upload.log.split("\n").each do |l|
        - if l.include?("ERROR - ")
          = l
    %p
      = link_to 'Approve', approve_upload_path(@upload)
      \-
      = link_to 'Reject', reject_upload_path(@upload)
- elsif @upload.log.include?("ERROR - ") and not @upload.state == 'needs_review' and not @upload.state == 'rejected'
  %div{:class=>'adminbox'}
    %h2 Problem encounted while uploading
    %p
      You should inform an administrator so they can investigate the problem.
    %p
      The following log lines are flagged as errors.
    %pre
      - @upload.log.split("\n").each do |l|
        - if l.include?("ERROR - ")
          = l
- if @upload.state == 'rejected'
  %div{:class=>'adminbox'}
    %h2 Upload was rejected
    %p
      An administrator decided that the content uploaded was not suitable for ingest and was thus rejected.
%p
  %strong User:
  = @upload.user.email
%p
  %strong Current state:
  = state(@upload.state)
%p
  %strong Original filename:
  = @upload.filename
%p
  %strong Cart Number:
  = @upload.cart or "Not imported to playout system yet"
- if can? :manage, @upload
  %div{:class=>'subtleadminbox', :id=>'cartnumberedit'}
    = form_tag "/uploads/#{@upload.id}/set_cart_number", :method => :post, :id => 'cn' do 
      = label_tag :cart_number, 'Set cart number'
      = text_field_tag :cart_number, @upload.cart
      = submit_tag 'Set'

%p
  %strong Current Job Status:
  - if @upload.current_job_id 
    = dj_status(@upload.current_job_id)
  - else
    No job running
%p
  %em Title and artist metadata is only available for uploads with appropriate metadata
%p
  %strong Title:
  = @upload.title or "No title metadata available"
%p
  %strong Artist:
  = @upload.artist or "No artist metadata available"
%p
  %strong Album:
  = @upload.album or "No album metadata available"
%p
  %strong Genres:
  = @upload.genre or "No genre metadata available"
%p
  %strong Bitrate/Format/Length:
  = (@upload.bitrate ? @upload.bitrate.to_s+"kbps" : nil) or "No bitrate metadata available"
  \- 
  = @upload.format or ""
  \- 
  = (@upload.length ? (@upload.length/1000).to_s+"s" : nil) or ""
%p
  %strong Record Label:
  = @upload.publisher or "No publisher metadata available"
%p
  %strong Composer:
  = @upload.composer or "No composer metadata available"
%p
  %strong Copyright:
  = @upload.copyright or "No copyright metadata available"
%p
  %strong ISRC:
  = @upload.isrc or "No International Standard Recording Code available"
%p
  %strong MusicBrainz Artist ID:
  - if @upload.musicbrainz_artist_id 
    = link_to @upload.musicbrainz_artist_id, "http://musicbrainz.org/artist/#{@upload.musicbrainz_artist_id}"
  - else
    Artist was not found on MusicBrainz (or metadata job has not run yet)
%p
  %strong MusicBrainz Track ID:
  - if @upload.musicbrainz_track_id 
    = link_to @upload.musicbrainz_track_id, "http://musicbrainz.org/recording/#{@upload.musicbrainz_track_id}"
  - else
    Track was not found on MusicBrainz (or metadata job has not run yet)

%h2 Loudness Waveforms
- if @h
  = high_chart("waveform", @h)
  %p 
    %em Note that this graph shows K-weighted 400ms gated loudness in accordance with EBU Recommendation 128 for loudness metering. It does not display true peak loudness. Use digital peak meters to avoid clipping in playout.
- else
  %p
    %em A loudness waveform has not yet been produced for this track. This graph is generated during normalization.
%h2 Processing Log
%p
  %em The processing log contains raw output of programs and jobs used to process the upload for diagnostic and debugging purposes.
%pre.log=render :partial=>'log', :locals=>{:log=>@upload.log}
- job = Delayed::Job.find(@upload.current_job_id) rescue nil
- if job and job.last_error
  %h2 Failure Traceback
  %pre= job.last_error.gsub('\n',"\n")
%h2 Lyrics
- if !@upload.lyrics
  %p
    %em If the track could be found on both MusicBrainz and MusixMatch, lyrics will be available here.
%pre= @upload.lyrics or "No lyrics available"
%p= link_to 'Back', uploads_path
