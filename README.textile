h1. Welcome to IRIS

IRIS is the Interchangeable Radio Ingest System. It's not a brilliant name, but what the heck.

It has one purpose, and one purpose only: Act as a firewall between presenters and staff, trying to upload their music, and what should be a very well maintained and looked-after music library in a radio playout system. Of course, this playout system could be anything- the current targets for automatic import to playout systems are the Rivendell broadcast atuomation sysetm and the Myriad 3.5 system from P Squared, but you can manually import the resultant files into anything.

The goal is to make adhesion to guidelines for technical quality in radio and other broadcast systems easier, and to automate as much of the ingest process as is possible in most workflows.


h2. Introduction

IRIS is a Ruby on Rails web application, for ease of use for both presenters and systems administrators. Ruby is a cinch to learn if you've not used it before, and trivial to read- so even if you don't know how to extend or adapt it, you can at least work out what it's doing by having a look under the hood.

The system is designed to be easy to adapt and modify for various scenarios and needs. It features flexible authentication (via the cancan plugin and Devise), a light set of dependencies on external programs to do audio and metadata processing, and a state machine based process for handling incoming uploads.

Audio first uploaded is scanned for technical (bitrate, samplerate, format, etc) metadata and non-technical (artist, title, album, copyright, composer etc) metadata. This is then correlated with the MusicBrainz DB where possible to fill in the blanks (ISRCs particularly). Audio is then unpacked to WAV for processing.

It features quality (bitrate/samplerate) filtering and supports filtering of explicit lyrics through the MusixMatch service (commercial in some cases, but reasonably cheap and free for non-commercial uses). Filtered uploads can be reviewed and either accepted or rejected by an administrator.

Audio being introduced to the system is archived to FLAC prior to processing, preserving an original copy of the file in case normalization needs to be reversed. Originals of uploads are also kept for debugging failed uploads etc, with the idea being that you nuke the originals every few days and keep the FLACs to hand in a consistent format.

Once audio is unpacked to WAV (via ffmpeg, so incoming files can be pretty much anything), it is normalized with an aim to not comply per-se but at least motion towards the EBU R128 standard for loudness levelling.

Gains are adjusted to bring R128 loudness into line with -23 LUFS, and loudness range can be adjusted (compression of dynamic range) in situ, reducing the amount of post-playout processing required to achieve consistent levels.

All jobs and processing can be distributed across multiple machines with shared storage using a simple database based queue system that also ensures first-in-first-out processing priority, failure logging and retries, and per-upload logging.

An EBU R128 0.4s momentary loudness waveform is generated and stored in the DB before, after compression (if a compressor is used) and after the entire normalization step, allowing quick and easy review of track loudness and normalization effects.


h2. Dependencies and Installation

IRIS requires:

* Ruby (1.9.2 recommended; I usually do a from-source install from ruby-lang.org, saves headaches) and development headers (not needed if you did it from source)
* The bundler gem (sudo gem install bundler)
* sox, ecasound, ffmpeg and exiftool (all available in Ubuntu's repos, other distros may vary)
* The SC4 LADSPA compressor (available in swh-plugins in Ubuntu)
* r128-scanner from libebur128 (https://github.com/jiixyj/libebur128)
* nginx with the nginx upload module (http://www.grid.net.ru/nginx/upload.en.html)
* A database server (PostgreSQL highly recommended)
* libxml-dev, libxslt-dev, graphviz-dev, ffmpeg-dev libraries
* Optionally for bwf export, bwfmetaedit (http://bwfmetaedit.sourceforge.net)

... and that's it. (Yeah, there's a fair bit there.)

Once you've installed the prerequisites, just git clone the repo to somewhere, cd in, and run <code>bundle install</code> to get the required gems. Once that's done, copy config/database.yml.example to config/database.yml, configure it.

Then you just <code>rake db:migrate</code> to set up the DB, <code>rails server thin</code> to start the application server (run that in a screen), fire up nginx with the config in doc/nginx.conf.example (or roll your own based on that), and grab another screen and run <code>rake jobs:work</code>. Bam. Now you can open localhost:81 in a browser, and upload stuff and see everything just work. In theory.

If you've worked with Rails before: It's a bog-standard Rails 3 app with some audio cleverness added in via external programs and a nginx upload module requirement. Flavour to taste.

Deployment can be automated with capistrano if you've got a few boxes you want to run it across to share the load (r128-scanner and ecasound can use a lot of CPU, as can FLAC encoding and so on...)


h2. History

IRIS is the successor to MACIS, a similar system originally developed to interface with the Myriad playout system at Insanity Radio 1287AM (http://insanityradio.com). MACIS was slapped together in a couple of days and didn't work very well.

IRIS was originally slapped together in about a week and works way, way better than MACIS ever did. MACIS was also site-specific; IRIS was developed to be taken to other stations where appropriate, and to be a more generally usable system.

h2. Credits

IRIS wouldn't work without a whole boatload of Linux audio tools, so a huge collective thank-you to the Linux audio development community.

IRIS was written by James Harrison (http://talkunafraid.co.uk), Insanity's Head of Technology from 2010 till 2012.

h2. License

IRIS is licensed under the GNU GPL v3 or greater, except where otherwise noted (external libs and such).
